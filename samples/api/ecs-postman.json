{
	"info": {
		"_postman_id": "16592cba-d66a-4169-a996-5a603276007d",
		"name": "ECS API Collection - 202211.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Signup",
			"item": [
				{
					"name": "Signup as supplier",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{supplier_org_name}}\",\r\n    \"description\": \"{{supplier_org_name}}\",\r\n    \"roles\": [\r\n        \"Supplier\"\r\n    ],\r\n    \"admin\": {\r\n        \"name\": \"{{supplier_org_name}} Admin\"\r\n    },\r\n    \"isOmnibusOrganization\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/signup",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup as registry",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{registry_org_name}}\",\r\n    \"description\": \"{{registry_org_name}}\",\r\n    \"roles\": [\r\n        \"IssuingRegistry\"\r\n    ],\r\n    \"admin\": {\r\n        \"name\": \"{{registry_org_name}} Admin\"\r\n    },\r\n    \"isOmnibusOrganization\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/signup",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup as verifier",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{verifier_org_name}}\",\r\n    \"description\": \"{{verifier_org_name}}\",\r\n    \"roles\": [\r\n        \"ValidationAndVerificationBody\"\r\n    ],\r\n    \"admin\": {\r\n        \"name\": \"{{verifier_org_name}} Admin\"\r\n    },\r\n    \"isOmnibusOrganization\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/signup",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup as marketplace",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{marketplace_org_name}}\",\r\n    \"description\": \"{{marketplace_org_name}}\",\r\n    \"roles\": [\r\n        \"Marketplace\"\r\n    ],\r\n    \"admin\": {\r\n        \"name\": \"{{marketplace_org_name}} Admin\"\r\n    },\r\n    \"isOmnibusOrganization\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/signup",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup as buyer",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{buyer_org_name}}\",\r\n    \"description\": \"{{buyer_org_name}}\",\r\n    \"roles\": [\r\n        \"Buyer\"\r\n    ],\r\n    \"admin\": {\r\n        \"name\": \"{{buyer_org_name}} Admin\"\r\n    },\r\n    \"isOmnibusOrganization\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/signup",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Setup organizations",
			"item": [
				{
					"name": "Supplier",
					"item": [
						{
							"name": "Get organization details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var organization = JSON.parse(responseBody);\r",
											"if(!organization)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"supplier_organization_id\", organization.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"supplier_admin_id\", user.id);\r",
											"pm.environment.set(\"supplier_organization_id\", user.organizationId);\r",
											"pm.environment.set(\"supplier_market_role\", user.defaultMarketRole);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Issuing Registry",
					"item": [
						{
							"name": "Get organization details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var organization = JSON.parse(responseBody);\r",
											"if(!organization)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"registry_organization_id\", organization.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registry_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"registry_admin_id\", user.id);\r",
											"pm.environment.set(\"registry_organization_id\", user.organizationId);\r",
											"pm.environment.set(\"registry_market_role\", user.defaultMarketRole);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registry_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{registry_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{registry_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verifier",
					"item": [
						{
							"name": "Get organization details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var organization = JSON.parse(responseBody);\r",
											"if(!organization)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"verifier_organization_id\", organization.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"verifier_admin_id\", user.id);\r",
											"pm.environment.set(\"verifier_organization_id\", user.organizationId);\r",
											"pm.environment.set(\"verifier_market_role\", user.defaultMarketRole);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{verifier_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{verifier_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Marketplace",
					"item": [
						{
							"name": "Get organization details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var organization = JSON.parse(responseBody);\r",
											"if(!organization)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"marketplace_organization_id\", organization.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{marketplace_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"marketplace_admin_id\", user.id);\r",
											"pm.environment.set(\"marketplace_organization_id\", user.organizationId);\r",
											"pm.environment.set(\"marketplace_market_role\", user.defaultMarketRole);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{marketplace_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{marketplace_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{marketplace_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Buyer",
					"item": [
						{
							"name": "Get organization details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var organization = JSON.parse(responseBody);\r",
											"if(!organization)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"buyer_organization_id\", organization.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"buyer_admin_id\", user.id);\r",
											"pm.environment.set(\"buyer_organization_id\", user.organizationId);\r",
											"pm.environment.set(\"buyer_market_role\", user.defaultMarketRole);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{buyer_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{buyer_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Role definitions",
			"item": [
				{
					"name": "Get all role definitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var roleDefinitions = JSON.parse(responseBody);\r",
									"if(!roleDefinitions || responseBody.error || !roleDefinitions.length)\r",
									"    return;\r",
									"\r",
									"for (var i = 0; i < roleDefinitions.length; i++)\r",
									"{\r",
									"    var roleDefinition = roleDefinitions[i];\r",
									"\r",
									"    var envName = undefined\r",
									"    if (roleDefinition.name.includes(\"Validation and Verification Body\")) {\r",
									"        var roleDefinitionNameParts = roleDefinition.name.toLowerCase().split(' ');\r",
									"        envName = \"verifier_\" + roleDefinitionNameParts[roleDefinitionNameParts.length - 1] + '_roledefinition_id';\r",
									"    }\r",
									"    else if (roleDefinition.name.includes(\"Issuing Registry\")) {\r",
									"        var roleDefinitionNameParts = roleDefinition.name.toLowerCase().split(' ');\r",
									"        envName = \"registry_\" + roleDefinitionNameParts[roleDefinitionNameParts.length - 1] + '_roledefinition_id';\r",
									"    }\r",
									"    else {\r",
									"        envName = roleDefinition.name.toLowerCase().split(' ').join('_') + '_roledefinition_id';\r",
									"    }\r",
									"\r",
									"    if (envName)\r",
									"        pm.environment.set(envName, roleDefinition.id);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/roleDefinitions",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"roleDefinitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Role Definition by Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/roleDefinitions/{{supplier_reader_roledefinition_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"roleDefinitions",
								"{{supplier_reader_roledefinition_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Onboard users",
			"item": [
				{
					"name": "Supplier",
					"item": [
						{
							"name": "Get organization details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var organization = JSON.parse(responseBody);\r",
											"if(!organization)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"supplier_organization_id\", organization.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin user details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"supplier_admin_id\", user.id);\r",
											"pm.environment.set(\"supplier_organization_id\", user.organizationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard contributor user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"supplier_contributor_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Supplier Contributor\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{supplier_contributor_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    },\r\n    \"role\": {\r\n        \"roleDefinitionId\": \"{{supplier_contributor_roledefinition_id}}\",\r\n        \"assignableScope\": \"Organizations\",\r\n        \"resourceUri\": \"/organizations/{{supplier_organization_id}}\"\r\n    }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get contributor user details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"supplier_contributor_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard reader user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"supplier_reader_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Supplier Reader\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{supplier_reader_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    },\r\n    \"role\": {\r\n        \"roleDefinitionId\": \"{{supplier_reader_roledefinition_id}}\",\r\n        \"assignableScope\": \"Organizations\",\r\n        \"resourceUri\": \"/organizations/{{supplier_organization_id}}\"\r\n    }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get reader user details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"supplier_reader_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_reader_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Issuing Registry",
					"item": [
						{
							"name": "Get organization details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var organization = JSON.parse(responseBody);\r",
											"if(!organization)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"registry_organization_id\", organization.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registry_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"registry_admin_id\", user.id);\r",
											"pm.environment.set(\"registry_organization_id\", user.organizationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registry_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{registry_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{registry_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard contributor user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"registry_contributor_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registry_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Issuing Registry Contributor\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{registry_contributor_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    },\r\n    \"role\": {\r\n        \"roleDefinitionId\": \"{{registry_contributor_roledefinition_id}}\",\r\n        \"assignableScope\": \"Organizations\",\r\n        \"resourceUri\": \"/organizations/{{registry_organization_id}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{registry_organization_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{registry_organization_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get contributor user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"registry_contributor_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registry_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{registry_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{registry_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard reader user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"registry_reader_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registry_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Issuing Registry Reader\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{registry_reader_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    },\r\n    \"role\": {\r\n        \"roleDefinitionId\": \"{{registry_reader_roledefinition_id}}\",\r\n        \"assignableScope\": \"Organizations\",\r\n        \"resourceUri\": \"/organizations/{{registry_organization_id}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{registry_organization_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{registry_organization_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get reader user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"registry_reader_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registry_reader_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{registry_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{registry_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verifier",
					"item": [
						{
							"name": "Get organization details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var organization = JSON.parse(responseBody);\r",
											"if(!organization)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"verifier_organization_id\", organization.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"verifier_admin_id\", user.id);\r",
											"pm.environment.set(\"verifier_organization_id\", user.organizationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{verifier_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{verifier_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard contributor user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"verifier_contributor_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Verifier Contributor\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{verifier_contributor_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    },\r\n    \"role\": {\r\n        \"roleDefinitionId\": \"{{verifier_contributor_roledefinition_id}}\",\r\n        \"assignableScope\": \"Organizations\",\r\n        \"resourceUri\": \"/organizations/{{verifier_organization_id}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{verifier_organization_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{verifier_organization_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get contributor user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"verifier_contributor_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{verifier_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{verifier_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard reader user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"verifier_reader_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Verifier Reader\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{verifier_reader_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    },\r\n    \"role\": {\r\n        \"roleDefinitionId\": \"{{verifier_reader_roledefinition_id}}\",\r\n        \"assignableScope\": \"Organizations\",\r\n        \"resourceUri\": \"/organizations/{{verifier_organization_id}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{verifier_organization_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{verifier_organization_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get reader user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"verifier_reader_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_reader_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{verifier_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{verifier_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Marketplace",
					"item": [
						{
							"name": "Get organization details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var organization = JSON.parse(responseBody);\r",
											"if(!organization)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"marketplace_organization_id\", organization.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{marketplace_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"marketplace_admin_id\", user.id);\r",
											"pm.environment.set(\"marketplace_organization_id\", user.organizationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{marketplace_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{marketplace_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{marketplace_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard contributor user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"marketplace_contributor_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{marketplace_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Marketplace Contributor\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{marketplace_contributor_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    },\r\n    \"role\": {\r\n        \"roleDefinitionId\": \"{{marketplace_contributor_roledefinition_id}}\",\r\n        \"assignableScope\": \"Organizations\",\r\n        \"resourceUri\": \"/organizations/{{marketplace_organization_id}}\"\r\n    }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{marketplace_organization_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{marketplace_organization_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get contributor user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"marketplace_contributor_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{marketplace_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{marketplace_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{marketplace_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard reader user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"marketplace_reader_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{marketplace_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Marketplace Reader\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{marketplace_reader_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    },\r\n    \"role\": {\r\n        \"roleDefinitionId\": \"{{marketplace_reader_roledefinition_id}}\",\r\n        \"assignableScope\": \"Organizations\",\r\n        \"resourceUri\": \"/organizations/{{marketplace_organization_id}}\"\r\n    }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{marketplace_organization_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{marketplace_organization_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get reader user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"marketplace_reader_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{marketplace_reader_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{marketplace_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{marketplace_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Buyer",
					"item": [
						{
							"name": "Get organization details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var organization = JSON.parse(responseBody);\r",
											"if(!organization)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"buyer_organization_id\", organization.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"buyer_admin_id\", user.id);\r",
											"pm.environment.set(\"buyer_organization_id\", user.organizationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{buyer_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{buyer_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard contributor user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"buyer_contributor_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Buyer Contributor\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{buyer_contributor_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    },\r\n    \"role\": {\r\n        \"roleDefinitionId\": \"{{buyer_contributor_roledefinition_id}}\",\r\n        \"assignableScope\": \"Organizations\",\r\n        \"resourceUri\": \"/organizations/{{buyer_organization_id}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{buyer_organization_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{buyer_organization_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get contributor user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"buyer_contributor_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{buyer_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{buyer_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard reader user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"buyer_reader_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Buyer Reader\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{buyer_reader_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    },\r\n    \"role\": {\r\n        \"roleDefinitionId\": \"{{buyer_reader_roledefinition_id}}\",\r\n        \"assignableScope\": \"Organizations\",\r\n        \"resourceUri\": \"/organizations/{{buyer_organization_id}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{buyer_organization_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{buyer_organization_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get reader user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"buyer_reader_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_reader_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{buyer_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{buyer_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Role assignments",
			"item": [
				{
					"name": "Create role assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var roleAssignment = JSON.parse(responseBody);\r",
									"if(!roleAssignment || responseBody.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"roleassignment_id\", roleAssignment.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roleDefinitionId\": \"{{supplier_contributor_roledefinition_id}}\",\r\n    \"identity\": {\r\n        \"type\": \"User\",\r\n        \"id\": \"{{supplier_reader_id}}\"\r\n    },\r\n    \"assignableScope\": \"Organizations\",\r\n    \"resourceUri\": \"/organizations/{{supplier_organization_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/roleAssignments",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"roleAssignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get role assignment by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/roleAssignments/{{roleassignment_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"roleAssignments",
								"{{roleassignment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all role assignments in my default market role",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/roleAssignments?resourceUri=/organizations/{{supplier_organization_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"roleAssignments"
							],
							"query": [
								{
									"key": "resourceUri",
									"value": "/organizations/{{supplier_organization_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all role assignments in my default market role by user IDs",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/roleAssignments?userIds={{supplier_contributor_id}}&resourceUri=/organizations/{{supplier_organization_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"roleAssignments"
							],
							"query": [
								{
									"key": "userIds",
									"value": "{{supplier_contributor_id}}"
								},
								{
									"key": "resourceUri",
									"value": "/organizations/{{supplier_organization_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get my role assignments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/roleAssignments/my",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"roleAssignments",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete role assignment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{host}}/roleAssignments/{{roleassignment_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"roleAssignments",
								"{{roleassignment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create role assignment at an asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var roleAssignment = JSON.parse(responseBody);\r",
									"if(!roleAssignment || responseBody.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"roleassignment_id\", roleAssignment.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roleDefinitionId\": \"{{supplier_contributor_roledefinition_id}}\",\r\n    \"identity\": {\r\n        \"type\": \"User\",\r\n        \"id\": \"{{supplier_reader_id}}\"\r\n    },\r\n    \"assignableScope\": \"EcoProjects\",\r\n    \"resourceUri\": \"/ecoProjects/{{ecoproject_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/roleAssignments",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"roleAssignments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Get organization by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations/{{supplier_organization_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{supplier_organization_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all organizations",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get my organization details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations/my",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get my default market role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users/me",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{supplier_organization_id}}",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set default market role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"defaultMarketRole\": \"Supplier\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users/setMyDefaultMarketRole",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{supplier_organization_id}}",
								"users",
								"setMyDefaultMarketRole"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set cross-org access policy at organization level",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"marketRole\": \"Marketplace\",\r\n        \"organizationIds\": []\r\n    },\r\n    {\r\n        \"marketRole\": \"Buyer\",\r\n        \"organizationIds\": [\"{{buyer_organization_id}}\"]\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/setCrossOrgAccessPolicy",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{supplier_organization_id}}",
								"setCrossOrgAccessPolicy"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get my details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users/me",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{supplier_organization_id}}",
								"users",
								"me"
							]
						},
						"description": "This API helps in fetching details of the signed-in user as onboarded with ECS."
					},
					"response": []
				},
				{
					"name": "Get a user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = JSON.parse(responseBody);\r",
									"var userHeaders = responseHeaders;\r",
									"if(!user || user.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"user_etag\", userHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users/{{supplier_reader_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{supplier_organization_id}}",
								"users",
								"{{supplier_reader_id}}"
							]
						},
						"description": "This API helps in fetching the user with given ID registered with ECS."
					},
					"response": []
				},
				{
					"name": "Update a user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{user_etag}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"PPE Supplier Reader (Updated)\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users/{{supplier_reader_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{supplier_organization_id}}",
								"users",
								"{{supplier_reader_id}}"
							]
						},
						"description": "This API helps in updating the user registered with ECS."
					},
					"response": []
				},
				{
					"name": "Get all users in my organization",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{supplier_organization_id}}",
								"users"
							]
						},
						"description": "This API helps in fetching all the users onboarded to my organization with ECS."
					},
					"response": []
				}
			]
		},
		{
			"name": "Onboard organization to other market role",
			"item": [
				{
					"name": "Get my organization details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations/my",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update organization's market roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Marketplace/Buyer Organization\",\r\n    \"description\": \"Marketplace/Buyer Organization\",\r\n    \"roles\": [\r\n        \"Marketplace\",\r\n        \"Buyer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/organizations/{{marketplace_organization_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{marketplace_organization_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get my organization details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations/my",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get my details (in context of admin user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations/{{marketplace_organization_id}}/users/me",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{marketplace_organization_id}}",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update default market role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"defaultMarketRole\": \"Buyer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/organizations/{{marketplace_organization_id}}/users/setMyDefaultMarketRole",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{marketplace_organization_id}}",
								"users",
								"setMyDefaultMarketRole"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get my details (in context of admin user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/organizations/{{marketplace_organization_id}}/users/me",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"organizations",
								"{{marketplace_organization_id}}",
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Metadata",
			"item": [
				{
					"name": "Get all Countries/Regions details",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/metadata/countriesorregions",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"metadata",
								"countriesorregions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Country/Region details by code",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/metadata/countriesorregions/IN",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"metadata",
								"countriesorregions",
								"IN"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all verification standards",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/metadata/verificationstandards",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"metadata",
								"verificationstandards"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a verification standard details by code",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/metadata/verificationstandards/Ccb",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"metadata",
								"verificationstandards",
								"Ccb"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ecological project creation",
			"item": [
				{
					"name": "Create ecological project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ecoProject = JSON.parse(responseBody);\r",
									"if(!ecoProject || ecoProject.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"ecoproject_id\", ecoProject.id);\r",
									"if(ecoProject.modularBenefitProjects && ecoProject.modularBenefitProjects.length > 0)\r",
									"{\r",
									"    pm.environment.set(\"mbp_id\", ecoProject.modularBenefitProjects[0].id);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"random_number\", Date.now());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Project Contoso {{random_number}}\",\r\n    \"description\": \"This is Project Contoso.\",\r\n    \"projectInfo\":{        \r\n        \"countryOrRegion\": \"IN\",\r\n        \"firstYearIssuance\": \"1234\",\r\n        \"scale\": 1,\r\n        \"informationLink\": \"http://www.contoso.com/\"\r\n    },\r\n    \"modularBenefitProjects\":[\r\n        {\r\n            \"name\": \"MBP Contoso\",\r\n            \"ecologicalBenefitType\": \"SolarWaterHeaters\",\r\n            \"ecologicalBenefitScope\": \"RenewableEnergy\",\r\n            \"category\": \"Avoidance\",\r\n            \"method\": \"MixedNatureTechnology\",\r\n            \"issuingRegistryId\": \"{{registry_organization_id}}\",\r\n            \"geoLocation\":\"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1, 1]}\",\r\n            \"developers\":[\r\n                {\r\n                    \"id\": \"{{supplier_admin_id}}\"\r\n                }\r\n            ],\r\n            \"sponsors\":[\r\n                {\r\n                    \"id\": \"{{supplier_admin_id}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/ecoprojects",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects"
							]
						},
						"description": "This API helps in creating ecological project in draft state."
					},
					"response": []
				},
				{
					"name": "Set cross-org access policy on ecological project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-ms-marketRole",
								"value": "Supplier",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"marketRole\": \"Marketplace\",\r\n        \"organizationIds\": []\r\n    },\r\n    {\r\n        \"marketRole\": \"Buyer\",\r\n        \"organizationIds\": [\"{{buyer_organization_id}}\"]\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/setCrossOrgAccessPolicy",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"setCrossOrgAccessPolicy"
							]
						},
						"description": "This API helps in creating cross-org policy on the ecological project."
					},
					"response": []
				},
				{
					"name": "Create MBP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbp = JSON.parse(responseBody);\r",
									"if(!mbp || mbp.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbp_id\", mbp.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"MBP Contoso 2\",\r\n    \"ecologicalBenefitType\": \"SolarWaterHeaters\",\r\n    \"ecologicalBenefitScope\": \"RenewableEnergy\",\r\n    \"category\": \"Avoidance\",\r\n    \"method\": \"MixedNatureTechnology\",\r\n    \"issuingRegistryId\": \"{{registry_organization_id}}\",\r\n    \"geoLocation\":\"{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[0,1], [1,0], [2,0], [2,1], [1,2], [0,1]]}\",\r\n    \"developers\":[\r\n        {\r\n            \"id\": \"{{supplier_admin_id}}\"\r\n        }\r\n    ],\r\n    \"sponsors\":[\r\n        {\r\n            \"id\": \"{{supplier_contributor_id}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps"
							]
						},
						"description": "This API helps in creating a new modular benefit project."
					},
					"response": []
				},
				{
					"name": "Set cross-org access policy on MBP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-ms-marketRole",
								"value": "Supplier",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"marketRole\": \"Marketplace\",\r\n        \"organizationIds\": []\r\n    },\r\n    {\r\n        \"marketRole\": \"Buyer\",\r\n        \"organizationIds\": [\"{{buyer_organization_id}}\"]\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/setCrossOrgAccessPolicy",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"setCrossOrgAccessPolicy"
							]
						},
						"description": "This API helps in creating cross-org access policy on the MBP."
					},
					"response": []
				},
				{
					"name": "Upload & Attach documents for MBP By Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_mbp_1\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "fileUrl",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "MBP Design",
									"type": "default"
								},
								{
									"key": "resourceUri",
									"value": "/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the uploaded file properties",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/files/{{file_id_mbp_1}}/properties",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"{{file_id_mbp_1}}",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download the file uploaded for MBP by supplier",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/files/{{file_id_mbp_1}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"{{file_id_mbp_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload a document by Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_mbp_2\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "MBP Design",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attach an existing document to MBP by Supplier",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceUri\": \"/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/files/{{file_id_mbp_2}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"{{file_id_mbp_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the uploaded file properties for MBP by Supplier",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/files/{{file_id_mbp_2}}/properties",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"{{file_id_mbp_2}}",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register MBP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var proposal = JSON.parse(responseBody);\r",
									"if(!proposal || proposal.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbp_proposal_id\", proposal.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"proposalType\": \"MBPRegister\",\r\n    \"resourceUri\": \"/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}\",\r\n    \"resourceId\": \"{{mbp_id}}\",\r\n    \"submitterId\": \"{{supplier_organization_id}}\",\r\n    \"approverId\": \"{{registry_organization_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MBP by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbp = JSON.parse(responseBody);\r",
									"var mbpHeaders = responseHeaders;\r",
									"if(!mbp || mbp.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbp_etag\", mbpHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload and attach documents to MBP by issuing registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_mbp_3\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "MBP Registration",
									"type": "default"
								},
								{
									"key": "resourceUri",
									"value": "/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MBP registration request by Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/proposals/{{mbp_proposal_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{mbp_proposal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return MBP registration proposal for edits",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"ReturnForEdits\",\r\n    \"message\": \"Please fill correct MBP details.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{mbp_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{mbp_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload a document by Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_mbp_4\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "MBP Design",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MBP by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbp = JSON.parse(responseBody);\r",
									"var mbpHeaders = responseHeaders;\r",
									"if(!mbp || mbp.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbp_etag\", mbpHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update MBP details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbp = JSON.parse(responseBody);\r",
									"var mbpHeaders = responseHeaders;\r",
									"if(!mbp || mbp.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbp_etag\", mbpHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{mbp_etag}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"MBP Contoso Updated\",\r\n    \"ecologicalBenefitType\": \"EnergyEfficiency\",\r\n    \"ecologicalBenefitScope\": \"Transportation\",\r\n    \"category\": \"Reduction\",\r\n    \"method\": \"Nature\",\r\n    \"geoLocation\": \"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[0,1.5], [1,0], [2,0], [2,1], [1,2], [0,1.5]]]}\",\r\n    \"developers\":[\r\n        {\r\n            \"id\": \"{{supplier_contributor_id}}\"\r\n        }\r\n    ],\r\n    \"sponsors\":[\r\n        {\r\n            \"id\": \"{{supplier_admin_id}}\"\r\n        }\r\n    ],\r\n    \"fileIds\": [\"{{file_id_mbp_1}}\", \"{{file_id_mbp_2}}\", \"{{file_id_mbp_3}}\", \"{{file_id_mbp_4}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resubmit MBP registration proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Submit\",\r\n    \"message\": \"Modified the MBP details.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{mbp_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{mbp_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload a document by Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_mbp_5\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "MBP Design",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate MBP overlaps report",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/findOverlaps",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"findOverlaps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get previous MBP overlaps report",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/overlaps",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"overlaps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve MBP registration proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Approve\",\r\n    \"message\": \"Approving MBP registration proposal.\",\r\n    \"fileIds\": [\"{{file_id_mbp_5}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{mbp_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{mbp_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all EcoProjects",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects"
							]
						},
						"description": "This API helps in fetching all the Ecological Projects registered with ECS.\n\nTo fetch projects created by specific entity or by self, please add query filters. Check GET all Ecological Projects created by @me sample request."
					},
					"response": []
				},
				{
					"name": "Get EcoProject by Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all EcoProjects created by my organization",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects?organizationId={{supplier_organization_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects"
							],
							"query": [
								{
									"key": "organizationId",
									"value": "{{supplier_organization_id}}"
								}
							]
						},
						"description": "This API helps in fetching all the Ecological Projects created by my organization with ECS."
					},
					"response": []
				},
				{
					"name": "Get all MBPs of an ecological project",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MBP Claims",
			"item": [
				{
					"name": "Upload documents for Claim checkpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_checkpoint_1\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "tag",
									"value": "Claim Checkpoint",
									"type": "default"
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add MBP Claim",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbpClaim = JSON.parse(responseBody);\r",
									"var mbpClaimHeaders = responseHeaders;\r",
									"if(!mbpClaim || mbpClaim.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbpclaim_id\", mbpClaim.id);\r",
									"pm.environment.set(\"mbpclaim_etag\", mbpClaimHeaders.ETag);\r",
									"if(mbpClaim.checkpoints && mbpClaim.checkpoints.length > 0)\r",
									"{\r",
									"    pm.environment.set(\"mbpcheckpoint_id\", mbpClaim.checkpoints[0].id);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"coBenefits\": [\"AffordableAndCleanEnergy\"],\r\n    \"quantity\": 10000,\r\n    \"checkpoints\": [\r\n        {\r\n            \"verifiedLinkToClaimData\":{\r\n                \"uri\": \"http://www.contoso.com/verifier/contosocheckpoint\",\r\n                \"description\": \"This is the contoso claim checkpoint1 verification link.\",\r\n                \"hashproof\": \"768311e2b72f5fb790a311313742f96af0cb0f013c71864bcd1f2b0b13f8c457\",\r\n                \"hashAlgorithm\": \"SHA256\"\r\n            },\r\n            \"dateRange\": {\r\n                \"startDate\": \"01/01/2021 12:00:00 AM\",\r\n                \"endDate\": \"01/02/2021 12:00:00 AM\"\r\n            },\r\n            \"efBefore\": \"123\",\r\n            \"efAfter\": \"111\"\r\n        },\r\n        {\r\n            \"verifiedLinkToClaimData\":{\r\n                \"uri\": \"http://www.contoso.com/verifier/contosocheckpoint2\",\r\n                \"description\": \"This is the contoso claim checkpoint2 verification link.\",\r\n                \"hashproof\": \"768311e2b72f5fb790a311313742f96af0cb0f013c71864bcd1f2b0b13f8c345\",\r\n                \"hashAlgorithm\": \"SHA256\"\r\n            },\r\n            \"dateRange\": {\r\n                \"startDate\": \"01/03/2021 12:00:00 AM\",\r\n                \"endDate\": \"01/04/2021 12:00:00 AM\"\r\n            },\r\n            \"efBefore\": \"123\",\r\n            \"efAfter\": \"111\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add MBP Claim Checkpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbpClaimCheckpoint = JSON.parse(responseBody);\r",
									"var mbpClaimCheckpointHeaders = responseHeaders;\r",
									"if(!mbpClaimCheckpoint || mbpClaimCheckpoint.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbpcheckpoint_id\", mbpClaimCheckpoint.id);\r",
									"pm.environment.set(\"mbpcheckpoint_etag\", mbpClaimCheckpointHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"verifiedLinkToClaimData\": {\r\n        \"uri\": \"http://www.contoso.com/verifier/contosocheckpoint\",\r\n        \"description\": \"This is the contoso claim checkpoint verification link.\",\r\n        \"hashproof\": \"768311e2b72f5fb790a311313742f96af0cb0f013c71864bcd1f2b0b13f8c457\",\r\n        \"hashAlgorithm\": \"SHA256\"\r\n    },\r\n    \"dateRange\": {\r\n        \"startDate\": \"01/09/2021 12:00:00 AM\",\r\n        \"endDate\": \"01/10/2021 12:00:00 AM\"\r\n    },\r\n    \"efBefore\": \"123\",\r\n    \"efAfter\": \"111\",\r\n    \"fileIds\": [\"{{file_id_checkpoint_1}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/checkpoints",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}",
								"checkpoints"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload and attach documents to claim checkpoints by supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_checkpoint_2\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "Claim Checkpoint",
									"type": "default"
								},
								{
									"key": "resourceUri",
									"value": "/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/checkpoints/{{mbpcheckpoint_id}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MBP Claim checkpoints",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/checkpoints",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}",
								"checkpoints"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create MBP Claim verification proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbpClaimVerificationProposal = JSON.parse(responseBody);\r",
									"if(!mbpClaimVerificationProposal || mbpClaimVerificationProposal.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbpclaimverification_proposal_id\", mbpClaimVerificationProposal.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"proposalType\": \"MBPClaimVerify\",\r\n    \"resourceUri\": \"/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}\",\r\n    \"resourceId\": \"{{mbpclaim_id}}\",\r\n    \"submitterId\": \"{{supplier_organization_id}}\",\r\n    \"approverId\": \"{{verifier_organization_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload and Attach documents to MBP Claim By Verifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_claim_1\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "Claim Verification",
									"type": "default"
								},
								{
									"key": "resourceUri",
									"value": "/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload documents for Claim by Verifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_claim_2\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "tag",
									"value": "Claim Verification",
									"type": "default"
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MBP Claim by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbpClaim = JSON.parse(responseBody);\r",
									"var mbpClaimHeaders = responseHeaders;\r",
									"if(!mbpClaim || mbpClaim.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbpclaim_etag\", mbpClaimHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MBP Claim Checkpoint by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbpClaimCheckpoint = JSON.parse(responseBody);\r",
									"var mbpClaimCheckpointHeaders = responseHeaders;\r",
									"if(!mbpClaimCheckpoint || mbpClaimCheckpoint.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbpcheckpoint_etag\", mbpClaimCheckpointHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/checkpoints/{{mbpcheckpoint_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}",
								"checkpoints",
								"{{mbpcheckpoint_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MBP Claim verification proposal by Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/proposals/{{mbpclaimverification_proposal_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{mbpclaimverification_proposal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return MBP Claim verification proposal for edits",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"ReturnForEdits\",\r\n    \"message\": \"Please fill correct claim details.\",\r\n    \"fileIds\": [\"{{file_id_claim_2}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{mbpclaimverification_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{mbpclaimverification_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MBP Claim by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbpClaim = JSON.parse(responseBody);\r",
									"var mbpClaimHeaders = responseHeaders;\r",
									"if(!mbpClaim || mbpClaim.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbpclaim_etag\", mbpClaimHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update MBP Claim",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbpClaim = JSON.parse(responseBody);\r",
									"var mbpClaimHeaders = responseHeaders;\r",
									"if(!mbpClaim || mbpClaim.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbpclaim_etag\", mbpClaimHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{mbpclaim_etag}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"coBenefits\": [\"CleanWaterAndSanitation\"],\r\n    \"quantity\": 2000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload documents for Claim checkpoint by Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_checkpoint_3\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "tag",
									"value": "Claim Checkpoint",
									"type": "default"
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MBP Claim Checkpoint by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbpClaimCheckpoint = JSON.parse(responseBody);\r",
									"var mbpClaimCheckpointHeaders = responseHeaders;\r",
									"if(!mbpClaimCheckpoint || mbpClaimCheckpoint.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbpcheckpoint_etag\", mbpClaimCheckpointHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/checkpoints/{{mbpcheckpoint_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}",
								"checkpoints",
								"{{mbpcheckpoint_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update MBP Claim Checkpoint by Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mbpClaimCheckpoint = JSON.parse(responseBody);\r",
									"var mbpClaimCheckpointHeaders = responseHeaders;\r",
									"if(!mbpClaimCheckpoint || mbpClaimCheckpoint.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"mbpcheckpoint_etag\", mbpClaimCheckpointHeaders.ETag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{mbpcheckpoint_etag}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dateRange\": {\r\n        \"startDate\": \"01/11/2021 12:00:00 AM\",\r\n        \"endDate\": \"01/12/2021 12:00:00 AM\"\r\n    },\r\n    \"efBefore\": \"100\",\r\n    \"efAfter\": \"110\",\r\n    \"fileIds\": [\"{{file_id_checkpoint_1}}\", \"{{file_id_checkpoint_2}}\", \"{{file_id_checkpoint_3}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/checkpoints/{{mbpcheckpoint_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}",
								"checkpoints",
								"{{mbpcheckpoint_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resubmit MBP Claim verification proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Submit\",\r\n    \"message\": \"Modified MBP Claim details.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{mbpclaimverification_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{mbpclaimverification_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload documents for Claim by Verifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_claim_3\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "tag",
									"value": "Claim Verification",
									"type": "default"
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate MBP overlaps report",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/findProjectOverlaps",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}",
								"findProjectOverlaps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept MBP Claim verification proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Accept\",\r\n    \"message\": \"Accepting claim verification proposal.\",\r\n    \"fileIds\": [\"{{file_id_claim_3}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{mbpclaimverification_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{mbpclaimverification_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload and Attach documents to MBP Claim By Verifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_claim_4\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "Claim Verification",
									"type": "default"
								},
								{
									"key": "resourceUri",
									"value": "/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload documents for Claim by Verifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_claim_5\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "tag",
									"value": "Claim Verification",
									"type": "default"
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get previous MBP overlaps report",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/projectOverlaps",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}",
								"projectOverlaps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve MBP Claim verification proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Approve\",\r\n    \"message\": \"Approving claim verification proposal.\",\r\n    \"fileIds\": [\"{{file_id_claim_5}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{mbpclaimverification_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{mbpclaimverification_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Credits",
			"item": [
				{
					"name": "Create credit mint proposal",
					"item": [
						{
							"name": "Create CCP credit mint proposal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var creditMintProposal = JSON.parse(responseBody);\r",
											"if(!creditMintProposal || creditMintProposal.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"creditmint_proposal_id\", creditMintProposal.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"proposalType\": \"CreditMint\",\r\n    \"resourceUri\": \"/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}\",\r\n    \"resourceId\": \"{{mbpclaim_id}}\",\r\n    \"submitterId\": \"{{verifier_organization_id}}\",\r\n    \"approverId\": \"{{registry_organization_id}}\",\r\n    \"request\": {\r\n        \"creditType\": \"CCP\",\r\n        \"quantity\": 1000,\r\n        \"determinedValue\": \"Generated\",\r\n        \"additionality\": 1,\r\n        \"leakage\": 1,\r\n        \"verificationStandard\": \"GsVer\",\r\n        \"coreCarbonAttributes\": {\r\n            \"durability\": \"LongTerm\",\r\n            \"ClearRemovalsN2O\": false,\r\n            \"ClearRemovalsCh4\": false,\r\n            \"CorrespondingAdjustment\": false,\r\n            \"storageType\": \"Materials\",\r\n            \"pALetterOfApproval\": {\r\n                \"uri\": \"http://www.contoso.com/registry/ccp\",\r\n                \"description\": \"This is CCP credit registration.\",\r\n                \"hashproof\": \"56ce6306dd8a1ac0d538e8cde2b592499bac9cdf0c1d27eb85ca90cd7e329c5c\",\r\n                \"hashAlgorithm\": \"SHA256\"\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/proposals",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"proposals"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create classic carbon credit mint proposal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var cccMintProposal = JSON.parse(responseBody);\r",
											"if(!cccMintProposal || cccMintProposal.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"creditmint_proposal_id\", cccMintProposal.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"proposalType\": \"CreditMint\",\r\n    \"resourceUri\": \"/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}\",\r\n    \"resourceId\": \"{{mbpclaim_id}}\",\r\n    \"submitterId\": \"{{verifier_organization_id}}\",\r\n    \"approverId\": \"{{registry_organization_id}}\",\r\n    \"request\": {\r\n        \"creditType\": \"CCC\",\r\n        \"quantity\": 1000,\r\n        \"determinedValue\": \"Generated\",\r\n        \"additionality\": 1,\r\n        \"leakage\": 1,\r\n        \"verificationStandard\": \"GsVer\",\r\n        \"classicCarbonAttributes\": {\r\n            \"categories\": [\"Avoidance\"],\r\n            \"methods\": [\"MixedNatureTechnology\"],\r\n            \"durability\": \"LongTerm\",\r\n            \"ClearRemovalsN2O\": false,\r\n            \"ClearRemovalsCh4\": false,\r\n            \"CorrespondingAdjustment\": false,\r\n            \"storageType\": \"Materials\",\r\n            \"pALetterOfApproval\": {\r\n                \"uri\": \"http://www.contoso.com/registry/ccc\",\r\n                \"description\": \"This is Contoso Classic Carbon Credit registration.\",\r\n                \"hashproof\": \"56ce6306dd8a1ac0d538e8cde2b592499bac9cdf0c1d27eb85ca90cd7e329c5c\",\r\n                \"hashAlgorithm\": \"SHA256\"\r\n            }\r\n    }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/proposals",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"proposals"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update credit mint proposal",
					"item": [
						{
							"name": "Update CCP credit mint proposal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"request\":{\r\n        \"quantity\": 2000,\r\n        \"additionality\": 2,\r\n        \"leakage\": 2,\r\n        \"verificationStandard\": \"Vcs\",\r\n        \"CoreCarbonAttributes\": {\r\n            \"durability\": \"ShortTerm\",\r\n            \"ClearRemovalsN2O\": true,\r\n            \"ClearRemovalsCh4\": true,\r\n            \"CorrespondingAdjustment\": true,\r\n            \"storageType\": \"Geological\"\r\n        }\r\n    }   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/proposals/{{creditmint_proposal_id}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"proposals",
										"{{creditmint_proposal_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update classic carbon credit mint proposal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var creditMintProposal = JSON.parse(responseBody);\r",
											"if(!creditMintProposal || creditMintProposal.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"creditmint_proposal_id\", creditMintProposal.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{verifier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"request\":{\r\n        \"quantity\": 2000,\r\n        \"additionality\": 2,\r\n        \"leakage\": 2,\r\n        \"verificationStandard\": \"Vcs\",\r\n        \"ClassicCarbonAttributes\": {\r\n            \"durability\": \"ShortTerm\",\r\n            \"ClearRemovalsN2O\": true,\r\n            \"ClearRemovalsCh4\": true,\r\n            \"CorrespondingAdjustment\": true,\r\n            \"storageType\": \"Geological\",\r\n            \"categories\": [\"Reduction\"],\r\n            \"methods\": [\"Nature\"]\r\n        }\r\n    }   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/proposals/{{creditmint_proposal_id}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"proposals",
										"{{creditmint_proposal_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get credit mint proposal by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/proposals/{{creditmint_proposal_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{creditmint_proposal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload documents By Registry to claim for Edits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_claim_6\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "tag",
									"value": "Credit Mint",
									"type": "default"
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return credit mint proposal for edits",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"ReturnForEdits\",\r\n    \"message\": \"Please update the credit recommendations.\",\r\n    \"fileIds\": [\"{{file_id_claim_6}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{creditmint_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{creditmint_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw credit mint proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Withdraw\",\r\n    \"message\": \"Withdrawing credit mint proposal to update the credit recommendations.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{creditmint_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{creditmint_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resubmit credit mint proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{verifier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Submit\",\r\n    \"message\": \"Modified the credit recommendations.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{creditmint_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{creditmint_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload documents by registry to credit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_credit_1\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "tag",
									"value": "Credit Mint",
									"type": "default"
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate MBP overlap report",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/findProjectOverlaps",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}",
								"findProjectOverlaps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate credit issuance overlap report",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"mapEcologicalBenefitType\": true,\r\n   \"mapCountryOrRegion\": false,\r\n   \"mapDurability\": true,\r\n   \"mapMethod\": false,\r\n   \"mapStorageType\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/findCreditOverlaps",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}",
								"findCreditOverlaps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get previous credit issuance overlap report",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}/mbpclaims/{{mbpclaim_id}}/creditOverlaps",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"ecoprojects",
								"{{ecoproject_id}}",
								"mbps",
								"{{mbp_id}}",
								"mbpclaims",
								"{{mbpclaim_id}}",
								"creditOverlaps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve credit mint proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var creditMintProposal = JSON.parse(responseBody);\r",
									"if(!creditMintProposal || creditMintProposal.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"credit_id\", creditMintProposal.issuedCreditId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Mint\",\r\n    \"message\": \"Approving credit mint proposal\",\r\n    \"factor\": 1,\r\n    \"vintage\": \"1234\",\r\n    \"assetId\": \"12345678-1234-1234-1234-123456789012\",\r\n    \"determinedValue\": \"Generated\",\r\n    \"fileIds\": [\"{{file_id_credit_1}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{creditmint_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{creditmint_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload and Attach documents By Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var file = JSON.parse(responseBody);\r",
									"if(!file || file.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"file_id_credit_2\", file.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "fileUri",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "Credit Mint",
									"type": "default"
								},
								{
									"key": "resourceUri",
									"value": "/credits/{{credit_id}}",
									"type": "default"
								},
								{
									"key": "isActive",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/files",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get credit by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set cross-org access policy on credit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-ms-marketRole",
								"value": "Supplier",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"marketRole\": \"Marketplace\",\r\n        \"organizationIds\": []\r\n    },\r\n    {\r\n        \"marketRole\": \"Buyer\",\r\n        \"organizationIds\": [\"{{buyer_organization_id}}\"]\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id}}/setCrossOrgAccessPolicy",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id}}",
								"setCrossOrgAccessPolicy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get credit by ID with reference items",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id}}?expand=true",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id}}"
							],
							"query": [
								{
									"key": "expand",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all credits",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/credits",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits"
							]
						}
					},
					"response": []
				},
				{
					"name": "Split credit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var credits = JSON.parse(responseBody);\r",
									"if(!credits || credits.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"credit_id\", credits[0].id);\r",
									"pm.environment.set(\"credit_id1\", credits[1].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantities\": [600, 400]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id}}/split",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id}}",
								"split"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET credit lineage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id}}/lineage",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id}}",
								"lineage"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Trader registrations",
			"item": [
				{
					"name": "Supplier - Trader registration proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var proposal = JSON.parse(responseBody);\r",
									"if(!proposal || proposal.error)\r",
									"    return;\r",
									"    \r",
									"pm.environment.set(\"supplier_trader_proposal_id\", proposal.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"proposalType\": \"MarketplaceTraderRegister\",\r\n    \"resourceUri\": \"/organizations/{{supplier_organization_id}}\",\r\n    \"resourceId\": \"{{supplier_organization_id}}\",\r\n    \"submitterId\": \"{{supplier_organization_id}}\",\r\n    \"approverId\": \"{{marketplace_organization_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Supplier - Trader registration proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Approve\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{supplier_trader_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{supplier_trader_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buyer - Trader registration proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var proposal = JSON.parse(responseBody);\r",
									"if(!proposal || proposal.error)\r",
									"    return;\r",
									"    \r",
									"pm.environment.set(\"buyer_trader_proposal_id\", proposal.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"proposalType\": \"MarketplaceTraderRegister\",\r\n    \"resourceUri\": \"/organizations/{{buyer_organization_id}}\",\r\n    \"resourceId\": \"{{buyer_organization_id}}\",\r\n    \"submitterId\": \"{{buyer_organization_id}}\",\r\n    \"approverId\": \"{{marketplace_organization_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Buyer - Trader registration proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Approve\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{buyer_trader_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{buyer_trader_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get traders registered with marketplace",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/marketplaces/{{marketplace_organization_id}}/traders",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"marketplaces",
								"{{marketplace_organization_id}}",
								"traders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enlist carbon credit",
			"item": [
				{
					"name": "Create credit listing proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var proposal = JSON.parse(responseBody);\r",
									"if(!proposal || proposal.error)\r",
									"    return;\r",
									"    \r",
									"pm.environment.set(\"credit_listing_proposal_id\", proposal.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"proposalType\": \"MarketplaceListingRegister\",\r\n    \"resourceUri\": \"/credits/{{credit_id}}\",\r\n    \"resourceId\": \"{{credit_id}}\",\r\n    \"submitterId\": \"{{supplier_organization_id}}\",\r\n    \"approverId\": \"{{marketplace_organization_id}}\",\r\n    \"request\":{\r\n        \"unitPrice\": 1.0\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve credit listing proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Approve\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{credit_listing_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{credit_listing_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get credits listed on the marketplace",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/marketplaces/{{marketplace_organization_id}}/listings",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"marketplaces",
								"{{marketplace_organization_id}}",
								"listings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List child carbon credit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var proposal = JSON.parse(responseBody);\r",
									"if(!proposal || proposal.error)\r",
									"    return;\r",
									"    \r",
									"pm.environment.set(\"credit_listing_proposal_id\", proposal.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"proposalType\": \"MarketplaceListingRegister\",\r\n    \"resourceUri\": \"/credits/{{credit_id1}}\",\r\n    \"resourceId\": \"{{credit_id1}}\",\r\n    \"submitterId\": \"{{supplier_organization_id}}\",\r\n    \"approverId\": \"{{marketplace_organization_id}}\",\r\n    \"request\":{\r\n        \"unitPrice\": 1.0\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve child carbon credit listing",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Approve\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{credit_listing_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{credit_listing_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get credits listed on the marketplace",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{marketplace_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/marketplaces/{{marketplace_organization_id}}/listings",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"marketplaces",
								"{{marketplace_organization_id}}",
								"listings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Credit transfer",
			"item": [
				{
					"name": "Transfer credit to buyer",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"recipientId\": \"{{buyer_organization_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id}}/transfer",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id}}",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get credit by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transfer credit to end use buyer",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"EndUseBuyerId\",\r\n    \"details\": \"EndUseBuyerDetails\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id}}/endusebuyertransfer",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id}}",
								"endusebuyertransfer"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Emissions scorecard",
			"item": [
				{
					"name": "Create ESG scorecard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var esg = JSON.parse(responseBody);\r",
									"\r",
									"if(!esg || esg.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"esg_id\", esg.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"goal\": 50.00,\r\n    \"goalEndDate\": \"12/31/2050\",\r\n    \"goalStatement\": \"Contoso pledge for sustainability.\",\r\n    \"currentEmissionsPerYear\": 1100.00\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/esgs",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"esgs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ESG Scorecard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var esgs = JSON.parse(responseBody);\r",
									"pm.environment.set(\"esg_id\", esgs[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/esgs",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"esgs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Milestone to ESG Scorecard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(!responseBody)\r",
									"    return;\r",
									"\r",
									"var milestone = JSON.parse(responseBody);\r",
									"if(!milestone)\r",
									"    return;\r",
									"\r",
									"if(milestone.id)\r",
									"    pm.environment.set(\"esg_milestone_id\", milestone.id);\r",
									"\r",
									"if(milestone.reportingPeriod != null && milestone.reportingPeriod.id)\r",
									"    pm.environment.set(\"reportingperiod_id\", milestone.reportingPeriod.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Contoso Milestone\",\r\n    \"description\": \"Constoso sustainability milestone.\",\r\n    \"startDate\": \"01/01/2023 12:00:00 AM\",\r\n    \"endDate\": \"01/31/2023 12:00:00 AM\",\r\n    \"targetEmissionReduction\": 100,\r\n    \"targetEmissionReductionType\": \"Absolute\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/esgs/{{esg_id}}/milestones",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"esgs",
								"{{esg_id}}",
								"milestones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Report emissions for the reporting period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var emission = JSON.parse(responseBody);\r",
									"pm.environment.set(\"emission_id\", emission.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"scope\": \"One\",\r\n    \"category\": \"IndirectBusinessTravel\",\r\n    \"quantity\": 4000.00\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/esgs/{{esg_id}}/milestones/{{esg_milestone_id}}/reportingperiods/{{reportingperiod_id}}/emissions",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"esgs",
								"{{esg_id}}",
								"milestones",
								"{{esg_milestone_id}}",
								"reportingperiods",
								"{{reportingperiod_id}}",
								"emissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ReportingPeriod by Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/esgs/{{esg_id}}/milestones/{{esg_milestone_id}}/reportingperiods/{{reportingperiod_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"esgs",
								"{{esg_id}}",
								"milestones",
								"{{esg_milestone_id}}",
								"reportingperiods",
								"{{reportingperiod_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ESG Milestone by Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/esgs/{{esg_id}}/milestones/{{esg_milestone_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"esgs",
								"{{esg_id}}",
								"milestones",
								"{{esg_milestone_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ESG Milestones",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/esgs/{{esg_id}}/milestones",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"esgs",
								"{{esg_id}}",
								"milestones"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Emissions Offset",
			"item": [
				{
					"name": "Create emission offset proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var proposal = JSON.parse(responseBody);\r",
									"pm.environment.set(\"emissionoffset_proposal_id\", proposal.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"proposalType\": \"ESGEmissionOffset\",\r\n    \"resourceUri\": \"/esgs/{{esg_id}}/milestones/{{esg_milestone_id}}/reportingPeriods/{{reportingperiod_id}}\",\r\n    \"resourceId\": \"{{reportingperiod_id}}\",\r\n    \"submitterId\": \"{{buyer_organization_id}}\",\r\n    \"approverId\": \"{{registry_organization_id}}\",\r\n    \"request\":{\r\n        \"creditId\": \"{{credit_id}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve emission offset proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Approve\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{emissionoffset_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{emissionoffset_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get credit by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get reporting period by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/esgs/{{esg_id}}/milestones/{{esg_milestone_id}}/reportingperiods/{{reportingperiod_id}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"esgs",
								"{{esg_id}}",
								"milestones",
								"{{esg_milestone_id}}",
								"reportingperiods",
								"{{reportingperiod_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Credit retirement",
			"item": [
				{
					"name": "Credit retirement proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var proposal = JSON.parse(responseBody);\r",
									"pm.environment.set(\"credit_retire_proposal_id\", proposal.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"proposalType\": \"CreditRetire\",\r\n    \"resourceUri\": \"/credits/{{credit_id1}}\",\r\n    \"resourceId\": \"{{credit_id1}}\",\r\n    \"submitterId\": \"{{buyer_organization_id}}\",\r\n    \"approverId\": \"{{registry_organization_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve credit retirement proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Approve\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{credit_retire_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{credit_retire_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get credit by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id1}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Omnibus Capabilities",
			"item": [
				{
					"name": "Split credit with End use buyer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var credits = JSON.parse(responseBody);\r",
									"if(!credits || credits.error)\r",
									"    return;\r",
									"\r",
									"pm.environment.set(\"credit_id\", credits[0].id);\r",
									"pm.environment.set(\"credit_id1\", credits[1].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantities\": [500, 100],\r\n    \"endUseBuyer\": {\r\n        \"id\": \"endUseBuyerId1\",\r\n        \"details\": \"endUseBuyerDetails1\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id}}/split",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id}}",
								"split"
							]
						}
					},
					"response": []
				},
				{
					"name": "Credit retirement proposal with End use buyer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var proposal = JSON.parse(responseBody);\r",
									"pm.environment.set(\"credit_retire_proposal_id\", proposal.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"proposalType\": \"CreditRetire\",\r\n    \"resourceUri\": \"/credits/{{credit_id1}}\",\r\n    \"resourceId\": \"{{credit_id1}}\",\r\n    \"submitterId\": \"{{buyer_organization_id}}\",\r\n    \"approverId\": \"{{registry_organization_id}}\",\r\n    \"endUseBuyer\": {\r\n        \"id\": \"endUseBuyerId2\",\r\n        \"details\": \"endUseBuyerDetails2\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve credit retirement proposal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registry_contributor_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"Approve\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/proposals/{{credit_retire_proposal_id}}/action",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"proposals",
								"{{credit_retire_proposal_id}}",
								"action"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get credit by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyer_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/credits/{{credit_id1}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"credits",
								"{{credit_id1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Get Notification event types",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/notifications/eventTypes",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications",
								"eventTypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Notification events",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{supplier_reader_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/notifications/events",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications",
								"events"
							],
							"query": [
								{
									"key": "eventTypeUris",
									"value": "",
									"description": "To pass multiple values, use separate key-value pairs with same key, i.e. eventTypeUris. Sample Value: ecoProjects/modularBenefitProjects/create",
									"disabled": true
								},
								{
									"key": "lastFetchedEventId",
									"value": "",
									"description": "Guid of the last fetched event",
									"disabled": true
								},
								{
									"key": "minEventDateTimeInUtc",
									"value": "",
									"description": "Sample Value: 2022-09-07T00:00:00.000Z",
									"disabled": true
								},
								{
									"key": "maxEventDateTimeInUtc",
									"value": "",
									"description": "Sample Value: 2022-09-08T00:00:00.000Z",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Asset-based access control with groups",
			"item": [
				{
					"name": "Supplier",
					"item": [
						{
							"name": "Create EcoProject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var ecoProject = JSON.parse(responseBody);\r",
											"if(!ecoProject || ecoProject.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"ecoproject_id\", ecoProject.id);\r",
											"if(ecoProject.modularBenefitProjects && ecoProject.modularBenefitProjects.length > 0)\r",
											"{\r",
											"    pm.environment.set(\"mbp_id\", ecoProject.modularBenefitProjects[0].id);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"random_number\", Date.now());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Project Contoso {{random_number}}\",\r\n    \"description\": \"This is Project Contoso.\",\r\n    \"projectInfo\":{        \r\n        \"countryOrRegion\": \"IN\",\r\n        \"firstYearIssuance\": \"1234\",\r\n        \"scale\": 1,\r\n        \"informationLink\": \"http://www.contoso.com/\"\r\n    },\r\n    \"modularBenefitProjects\":[\r\n        {\r\n            \"name\": \"MBP Contoso\",\r\n            \"ecologicalBenefitType\": \"SolarWaterHeaters\",\r\n            \"ecologicalBenefitScope\": \"RenewableEnergy\",\r\n            \"category\": \"Avoidance\",\r\n            \"method\": \"MixedNatureTechnology\",\r\n            \"issuingRegistryId\": \"{{registry_organization_id}}\",\r\n            \"geoLocation\":\"{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[1,0], [2,0], [2,1], [1,2], [0,1]]}\",\r\n            \"developers\":[],\r\n            \"sponsors\":[]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/ecoprojects",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"ecoprojects"
									]
								},
								"description": "This API helps in creating Ecological Project in DRAFT state."
							},
							"response": []
						},
						{
							"name": "Create a user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var userGroup = JSON.parse(responseBody);\r",
											"if(!userGroup || userGroup.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"group_id\", userGroup.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Supplier Group\",\r\n  \"description\": \"Supplier Group\",\r\n  \"role\": {\r\n    \"roleDefinitionId\": \"{{supplier_contributor_roledefinition_id}}\",\r\n    \"assignableScope\": \"EcoProjects\",\r\n    \"resourceUri\": \"/ecoprojects/{{ecoproject_id}}\"\r\n  },\r\n  \"users\": [\r\n    \"{{supplier_reader_id}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/groups",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a user group by Id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/groups/{{group_id}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all user groups in the organization",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/groups",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get my user groups in the organization",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/groups/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"groups",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users in a user group",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_contributor_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/groups/{{group_id}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"groups",
										"{{group_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add users to a user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var userGroup = JSON.parse(responseBody);\r",
											"if(!userGroup || userGroup.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"group_id\", userGroup.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  \"{{supplier_reader_id}}\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/groups/{{group_id}}/users/addToGroup",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"groups",
										"{{group_id}}",
										"users",
										"addToGroup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a user from a user group",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/groups/{{group_id}}/users/{{supplier_reader_id}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"groups",
										"{{group_id}}",
										"users",
										"{{supplier_reader_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Onboard a user to a user group",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"PPE Supplier Asset User 1\",\r\n    \"description\": \"PPE Supplier Asset User 1\",\r\n    \"identity\": {\r\n        \"externalId\": \"{{supplier_asset_user1_externalid}}\",\r\n        \"identityProvider\": \"AAD\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/groups/{{group_id}}/users/addNewUser",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"groups",
										"{{group_id}}",
										"users",
										"addNewUser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get access token for asset user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var accessTokenResponse = JSON.parse(responseBody);\r",
											"if(!accessTokenResponse || accessTokenResponse.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"supplier_asset_user1_token\", accessTokenResponse.access_token);\r",
											"pm.environment.set(\"supplier_asset_user1_expiry_time\", new Date().addSeconds(accessTokenResponse.expires_in));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{supplier_client_id}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{scope}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{supplier_asset_user1_username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{supplier_asset_user1_password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{protocol}}://{{auth_host}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{auth_host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get details of the asset user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = JSON.parse(responseBody);\r",
											"if(!user)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"supplier_asset_user1_id\", user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_asset_user1_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/organizations/{{supplier_organization_id}}/users/me",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"organizations",
										"{{supplier_organization_id}}",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get role assignments for asset user",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_asset_user1_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/roleAssignments/my",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"roleAssignments",
										"my"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all role assignments by scope",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_asset_user1_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/roleAssignments?resourceScope.assignableScope=EcoProjects&resourceScope.resourceUri=/ecoProjects/{{ecoproject_id}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"roleAssignments"
									],
									"query": [
										{
											"key": "resourceScope.assignableScope",
											"value": "EcoProjects"
										},
										{
											"key": "resourceScope.resourceUri",
											"value": "/ecoProjects/{{ecoproject_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create another EcoProject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var ecoProject = JSON.parse(responseBody);\r",
											"if(!ecoProject || ecoProject.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"ecoproject_id\", ecoProject.id);\r",
											"if(ecoProject.modularBenefitProjects && ecoProject.modularBenefitProjects.length > 0)\r",
											"{\r",
											"    pm.environment.set(\"mbp_id\", ecoProject.modularBenefitProjects[0].id);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"random_number\", Date.now());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Project Contoso {{random_number}}\",\r\n    \"description\": \"This is Project Contoso.\",\r\n    \"projectInfo\":{        \r\n        \"countryOrRegion\": \"IN\",\r\n        \"firstYearIssuance\": \"1234\",\r\n        \"scale\": 1,\r\n        \"informationLink\": \"http://www.contoso.com/\"\r\n    },\r\n    \"modularBenefitProjects\":[\r\n        {\r\n            \"name\": \"MBP Contoso\",\r\n            \"ecologicalBenefitType\": \"SolarWaterHeaters\",\r\n            \"ecologicalBenefitScope\": \"RenewableEnergy\",\r\n            \"category\": \"Avoidance\",\r\n            \"method\": \"MixedNatureTechnology\",\r\n            \"issuingRegistryId\": \"{{registry_organization_id}}\",\r\n            \"geoLocation\":{\r\n                \"longitude\": \"123.456\",\r\n                \"latitude\": \"12.345\",\r\n                \"areaGeoJson\": \"1234, Maint St Contoso, DL 123456\"\r\n            },\r\n            \"developers\":[\r\n                {\r\n                    \"id\": \"{{supplier_admin_id}}\"\r\n                }\r\n            ],\r\n            \"sponsors\":[\r\n                {\r\n                    \"id\": \"{{supplier_admin_id}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/ecoprojects",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"ecoprojects"
									]
								},
								"description": "This API helps in creating Ecological Project in DRAFT state."
							},
							"response": []
						},
						{
							"name": "Get MBP by Id (Asset User - Access denied)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var mbp = JSON.parse(responseBody);\r",
											"var mbpHeaders = responseHeaders;\r",
											"if(!mbp || mbp.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"mbp_etag\", mbpHeaders.ETag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_asset_user1_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"ecoprojects",
										"{{ecoproject_id}}",
										"mbps",
										"{{mbp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign a group to the MBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var roleAssignment = JSON.parse(responseBody);\r",
											"if(!roleAssignment || responseBody.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"roleassignment_id\", roleAssignment.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"roleDefinitionId\": \"{{supplier_reader_roledefinition_id}}\",\r\n    \"identity\": {\r\n        \"type\": \"Group\",\r\n        \"id\": \"{{group_id}}\"\r\n    },\r\n    \"assignableScope\": \"ModularBenefitProjects\",\r\n    \"resourceUri\": \"/ecoProjects/{{ecoproject_id}}/mbps/{{mbp_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/roleAssignments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"roleAssignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MBP by Id (Asset User - Access Granted)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var mbp = JSON.parse(responseBody);\r",
											"var mbpHeaders = responseHeaders;\r",
											"if(!mbp || mbp.error)\r",
											"    return;\r",
											"\r",
											"pm.environment.set(\"mbp_etag\", mbpHeaders.ETag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{supplier_asset_user1_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/ecoprojects/{{ecoproject_id}}/mbps/{{mbp_id}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"ecoprojects",
										"{{ecoproject_id}}",
										"mbps",
										"{{mbp_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get access token",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{supplier_client_id}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "{{scope}}",
							"type": "text"
						},
						{
							"key": "username",
							"value": "{{supplier_admin_username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{supplier_admin_password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{protocol}}://{{auth_host}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{auth_host}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Credit lineage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{supplier_reader_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{host}}/credits/{{credit_id}}/lineage",
					"protocol": "https",
					"host": [
						"{{host}}"
					],
					"path": [
						"credits",
						"{{credit_id}}",
						"lineage"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var protocol = pm.collectionVariables.get(\"protocol\");",
					"var auth_host = pm.collectionVariables.get(\"auth_host\");",
					"var scope = pm.collectionVariables.get(\"scope\");",
					"var grant_type = \"password\";",
					"",
					"function isValidToken(expiryTime){",
					"    var now = new Date();",
					"    var expiryTime = ",
					"        !!expiryTime",
					"        ? Date.parse(expiryTime)",
					"        : now;",
					"    var difference = Math.floor((now - expiryTime) / 1000);",
					"    console.log(now, expiryTime, difference)",
					"    if(difference > -30)",
					"        return false;",
					"    ",
					"    return true;",
					"}",
					"",
					"function refreshToken(market_role, user_role_type) {",
					"\tvar usertype = market_role + \"_\" + user_role_type;",
					"\t",
					"    var client_id = pm.collectionVariables.get(market_role+\"_client_id\");",
					"    var username = pm.collectionVariables.get(usertype+\"_username\");",
					"    var password = pm.collectionVariables.get(usertype+\"_password\");",
					"    var token = pm.environment.get(usertype+\"_token\");",
					"    var token_expiry_time = pm.environment.get(usertype+\"_token_expiry_time\");",
					"",
					"    if (!token || !isValidToken(token_expiry_time)) { // if within 30 seconds of expiring",
					"        console.log(\"Old access token expired, requesting new one...\");",
					"        pm.sendRequest({",
					"            url: protocol + \"://\" + auth_host,",
					"            method: \"POST\",",
					"            header: {",
					"                \"Accept\": \"application/json\",",
					"                \"Content-Type\": \"application/x-www-form-urlencoded\"",
					"            },",
					"            body: {",
					"                mode: \"urlencoded\",",
					"                urlencoded: [",
					"                    { key: \"client_id\", value: client_id, disabled: false },",
					"                    { key: \"grant_type\", value: grant_type, disabled: false },",
					"                    { key: \"scope\", value: scope, disabled: false },",
					"                    { key: \"username\", value: username, disabled: false },",
					"                    { key: \"password\", value: password, disabled: false }",
					"                ]",
					"            }",
					"        }, (error, response) => {",
					"            if (error) {",
					"                console.log(error);",
					"            } else if (response) {",
					"                // set new access token",
					"                pm.environment.set(usertype+\"_token\", response.json().access_token);",
					"                // set new expiry time",
					"                pm.environment.set(usertype+\"_token_expiry_time\", new Date().addSeconds(response.json().expires_in));",
					"            }",
					"        });",
					"    }",
					"}",
					"",
					"var market_roles = pm.collectionVariables.get(\"market_roles\").split(\",\");",
					"var user_role_types = pm.collectionVariables.get(\"user_role_types\").split(\",\");",
					"for(let i = 0; i < market_roles.length; ++i)",
					"    for(let j = 0; j < user_role_types.length; j++)",
					"        refreshToken(market_roles[i], user_role_types[j]);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "https",
			"type": "default"
		},
		{
			"key": "auth_host",
			"value": "login.microsoftonline.com/organizations/oauth2/v2.0/token",
			"type": "default"
		},
		{
			"key": "scope",
			"value": "https://ecs.mcfs.microsoft.com/Application.ReadWrite",
			"type": "default"
		},
		{
			"key": "host",
			"value": "api.ecs.mcfs.microsoft.com/preview"
		},
		{
			"key": "market_roles",
			"value": "supplier,verifier,marketplace,registry,buyer"
		},
		{
			"key": "user_role_types",
			"value": "admin,contributor,reader",
			"type": "string"
		},
		{
			"key": "supplier_client_id",
			"value": ""
		},
		{
			"key": "supplier_org_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "supplier_admin_username",
			"value": ""
		},
		{
			"key": "supplier_admin_password",
			"value": ""
		},
		{
			"key": "supplier_contributor_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "supplier_contributor_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "supplier_contributor_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "supplier_reader_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "supplier_reader_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "supplier_reader_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "supplier_asset_user1_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "supplier_asset_user1_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "supplier_asset_user1_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "registry_client_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "registry_org_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "registry_admin_username",
			"value": ""
		},
		{
			"key": "registry_admin_password",
			"value": ""
		},
		{
			"key": "registry_contributor_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "registry_contributor_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "registry_contributor_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "registry_reader_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "registry_reader_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "registry_reader_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "verifier_client_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "verifier_org_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "verifier_admin_username",
			"value": ""
		},
		{
			"key": "verifier_admin_password",
			"value": ""
		},
		{
			"key": "verifier_contributor_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "verifier_contributor_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "verifier_contributor_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "verifier_reader_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "verifier_reader_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "verifier_reader_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "marketplace_client_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "marketplace_org_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "marketplace_admin_username",
			"value": ""
		},
		{
			"key": "marketplace_admin_password",
			"value": ""
		},
		{
			"key": "marketplace_contributor_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "marketplace_contributor_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "marketplace_contributor_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "marketplace_reader_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "marketplace_reader_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "marketplace_reader_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "buyer_client_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "buyer_org_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "buyer_admin_username",
			"value": ""
		},
		{
			"key": "buyer_admin_password",
			"value": ""
		},
		{
			"key": "buyer_contributor_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "buyer_contributor_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "buyer_contributor_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "buyer_reader_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "buyer_reader_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "buyer_reader_externalid",
			"value": "",
			"type": "string"
		},
		{
			"key": "random_number",
			"value": ""
		}
	]
}